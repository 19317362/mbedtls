/* BEGIN_HEADER */
#include "mbedtls/pk.h"
#include "mbedtls/pem.h"
#include "mbedtls/oid.h"

static void pk_write_check_common(char *key_file, int is_public_key)
{
    mbedtls_pk_context key;
    unsigned char *buf = NULL;
    unsigned char *check_buf = NULL;
    size_t check_buf_len;
    int ret;

    /* Note: if mbedtls_pk_load_file() successfully reads the file, then
       it also allocates check_buf, which should be freed on exit */
    TEST_ASSERT(mbedtls_pk_load_file(key_file, &check_buf, &check_buf_len) == 0);
    TEST_ASSERT(check_buf_len > 0);

    ASSERT_ALLOC(buf, check_buf_len);

    mbedtls_pk_init(&key);
    if (is_public_key) {
        TEST_ASSERT(mbedtls_pk_parse_public_keyfile(&key, key_file) == 0);
        ret = mbedtls_pk_write_pubkey_pem(&key, buf, check_buf_len);
    } else {
        TEST_ASSERT(mbedtls_pk_parse_keyfile(&key, key_file, NULL,
                                             mbedtls_test_rnd_std_rand, NULL) == 0);
        ret = mbedtls_pk_write_key_pem(&key, buf, check_buf_len);
    }
    TEST_ASSERT(ret == 0);

    /* check_buf_len also includes the NULL termination char */
    TEST_EQUAL(check_buf_len - 1, strlen((char *) buf));
    TEST_ASSERT(memcmp((char *) buf, (char *) check_buf, check_buf_len) == 0);

exit:
    mbedtls_free(buf);
    mbedtls_free(check_buf);
    mbedtls_pk_free(&key);
}
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_PK_PARSE_C:MBEDTLS_PK_WRITE_C:MBEDTLS_BIGNUM_C:MBEDTLS_FS_IO
 * END_DEPENDENCIES
 */

/* BEGIN_CASE depends_on:MBEDTLS_PEM_WRITE_C */
void pk_write_pubkey_check(char *key_file)
{
    pk_write_check_common(key_file, 1);
    goto exit; /* make the compiler happy */
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_PEM_WRITE_C */
void pk_write_key_check(char *key_file)
{
    pk_write_check_common(key_file, 0);
    goto exit; /* make the compiler happy */
}
/* END_CASE */
